#!/bin/bash -

# Â© Crown Copyright 2013
*
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
*
#     http://www.apache.org/licenses/LICENSE-2.0
*
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

readonly ourName="$(basename "$0")"

cd "$(dirname "$0")" 1>/dev/null
readonly crudeOurPath="$(pwd)"
cd - 1>/dev/null

function exitHelp()
{
	echo "Usage: $ourName [--help]" 1>&2
	exit $1
}

function exitError()
{
	local -r error="$1"
	echo "$ourName: $error" 1>&2
	exitHelp 1
}

function setPaths()
{
	readonly sourcePath="$crudeOurPath"/../..
	readonly releasePath="$sourcePath"/../release
	readonly packageTemplatesPath="$sourcePath"/build/package-templates
	readonly lastReleasedCommitFile="$packageTemplatesPath"/last-released-commit
	
	readonly changelogTemplatesPath="$releasePath"/changelog-templates
	readonly changelogOutputFile="$changelogTemplatesPath"/changelog.template
	readonly NEWSOutputFile="$changelogTemplatesPath"/NEWS.template
	readonly changelogTemplateTemplateFile="$sourcePath"/package-templates/changelog.template
	readonly NEWSTemplateTemplateFile="$sourcePath"/package-templates/NEWS.template
	
	mkdir -p "$changelogTemplatesPath"
	cp "$changelogTemplateTemplateFile" "$changelogOutputFile"
	cp "$NEWSTemplateTemplateFile" "$NEWSOutputFile"
}

function lastReleasedCommit()
{
	readonly lastReleasedCommit="$(head -n 1 "$lastReleasedCommitFile")"
}

function getAuthorName()
{
	readonly authorName="$(git log -n 1 --pretty="format:%an")"
}

function getAuthorEmail()
{
	readonly authorEmail="$(git log -n 1 --pretty="format:%ae")"
}

function getVersionFromLatestAuthorDate()
{
	local -ir secondsSince1970="$(git log -n 1 --pretty="format:%at")"
	readonly packageVersion="$(date -u -d @${secondsSince1970} +%Y.%m.%d.%H%M)"
}

function mostRecentChange()
{
	readonly mostRecentChangeMessage="$(git log -n 1 --pretty="format:%H %aD %an: %s")"
	readonly currentBranch="$(git branch | grep '^\* ' | cut -c3-)"
	
	DEBEMAIL="$authorEmail" DEBFULLNAME="$authorName" debchange --no-auto-nmu --preserve --no-query --distribution "experimental" --force-distribution --urgency low --newversion "$packageVersion" --changelog "$changelogOutputFile" "$mostRecentChangeMessage"
	DEBEMAIL="$authorEmail" DEBFULLNAME="$authorName" debchange --no-auto-nmu --preserve --no-query --distribution "experimental" --force-distribution --urgency low --newversion "$packageVersion" --changelog "$changelogOutputFile" --news "$NEWSOutputFile" "$mostRecentChangeMessage (branch $currentBranch)"
}

function otherChanges()
{
	git log --skip=1 --pretty="format:%H %aD %an: %s" "$lastReleasedCommit".. | while read
	do
		# NEWS file processing is very broken, so we don't add any details
		DEBEMAIL="$authorEmail" DEBFULLNAME="$authorName" debchange --no-auto-nmu --preserve --no-query --append --changelog "$changelogOutputFile" "$REPLY"
	done
}

if [ $# -eq 1 ]; then
	if [ "$1" = "--help" ]; then
		exitHelp 2
	elif  [ "$1" = "-h" ]; then
		exitHelp 2
	else
		exitError "Invalid options"
	fi
elif [ $# -eq 0 ]; then
	:
else
	exitError "Invalid options"
fi

setPaths

lastReleasedCommit
getAuthorName
getAuthorEmail
getVersionFromLatestAuthorDate

mostRecentChange
otherChanges
