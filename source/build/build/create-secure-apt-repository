#!/bin/bash -

# © Crown Copyright 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

readonly ourName="$(basename "$0")"

cd "$(dirname "$0")" 1>/dev/null
readonly crudeOurPath="$(pwd)"
cd - 1>/dev/null

function exitHelp()
{
	echo "Usage: $ourName [--help]" 1>&2
	exit $1
}

function exitError()
{
	local -r error="$1"
	echo "$ourName: $error" 1>&2
	exitHelp 1
}

function setKeyringFolderPermissionsAsGitDoesNotRecordThese()
{
	chown "$UID" "$keyringPath"
	chmod 700 "$keyringPath"
}

function gpgWrapped()
{
	setKeyringFolderPermissionsAsGitDoesNotRecordThese
	gpg --verbose --no-greeting --no-permission-warning --no-random-seed-file --homedir "$keyringPath" "$@"
}

function setPaths()
{
	readonly sourcePath="$crudeOurPath"/../..
	
	cd "$sourcePath"/.. >/dev/null
	readonly rootPath="$(pwd)"
	cd - >/dev/null
	
	readonly releasePath="$rootPath"/release
	
	readonly packagesPath="$releasePath"/"$packagesFolderName"
	
	readonly secureAptRepositoryPath="$releasePath"/secure-apt-repositories/"$repositoryName"
	
	# symlink to /srv/apt-ftparchive/"$repositoryName"
	readonly archiveDirPath="$secureAptRepositoryPath"/archive
	
	# symlink to /var/cache/apt-ftparchive/"$repositoryName"
	readonly cacheDirPath="$secureAptRepositoryPath"/cache
	
	readonly configurationFilePath="$secureAptRepositoryPath"/apt-ftparchive.config
	
	readonly distributionPath="$archiveDirPath"/"$codeName"
	readonly distsCodeNamePath="$archiveDirPath"/dists/"$codeName"
	
	# Used by gpg
	readonly packageTemplatesPath="$sourcePath"/build/package-templates
	readonly keyringsPath="$packageTemplatesPath"/hdn-keyring-private/hdn-keyring-private/etc/hdn-keyring-private
	readonly keyringPath="$keyringsPath"/"$keyring"
	readonly repositoryKey="$archiveDirPath"/"$repositoryName".key
	readonly installFilePath="$archiveDirPath"/"$repositoryName".sh
}

function makePaths()
{
	mkdir -p "$archiveDirPath"
	mkdir -p "$cacheDirPath"
	for sectionName in $sectionNames
	do
		mkdir -p "$distributionPath"/"$sectionName"
		
		mkdir -p "$distsCodeNamePath"/"$sectionName"/source
		for architectureName in $architectureNames
		do
			mkdir -p "$distsCodeNamePath"/"$sectionName"/binary-"$architectureName"
		done
	done
}

function installPackages()
{
	readonly destinationPackagesPath="$distributionPath"/main
	rsync -a --link-dest="$packagesPath" --include='*/' --include='*.deb' --exclude='*' "$packagesPath"/ "$destinationPackagesPath"/
}

function createAptFtparchiveConfiguration()
{
	# Done to prevent bash interpreting as variable substitution these apt-ftparchive variables
	local -r SECTION='$(SECTION)'
	local -r DIST='$(DIST)'
	local -r ARCH='$(ARCH)'
	
	cat <<-EOF >"$configurationFilePath"
		APT::FTPArchive::Release::Origin "HDN";
		APT::FTPArchive::Release::Label "HDN";
		APT::FTPArchive::Release::Suite "${codeName}";
		#APT::FTPArchive::Release::Version "12.04";
		APT::FTPArchive::Release::Codename "${codeName}";
		#APT::FTPArchive::Release::Date "Wed, 25 Apr 2012 22:49:23 UTC";
		#APT::FTPArchive::Release::Valid-Until "Wed, 25 Apr 2012 22:49:23 UTC";
		APT::FTPArchive::Release::Architectures "${architectureNames} all";
		APT::FTPArchive::Release::Components "main restricted universe multiverse";
		APT::FTPArchive::Release::Description "Healthcare Developer Network Packages suitable for deployment on Ubuntu Precise 12.04 LTS";
	
		# Folders must exist
		Dir {
		   ArchiveDir "${archiveDirPath}";
		   #OverrideDir
		   CacheDir "${cacheDirPath}";
		   #FileListDir
		};

		Default {
		   Packages::Compress ". gzip bzip2 lzma";
		   Packages::Extensions ".deb";
		   Sources::Compress ". gzip bzip2 lzma";
		   Sources::Extensions ".dsc";
		   Contents::Compress ". gzip bzip2 lzma";
		   Translation::Compress ". gzip bzip2 lzma";
		   FileMode "0644";
		   LongDescription "true";
		};

		TreeDefault {
		   #MaxContentsChange
		   #ContentsAge "10";
		   Directory "${codeName}/${SECTION}";
		   SrcDirectory "${codeName}/${SECTION}";
		   Packages "${DIST}/${SECTION}/binary-${ARCH}/Packages";
		   Sources "${DIST}/${SECTION}/source/Sources";
		   Translation "${DIST}/${SECTION}/i18n/Translation-en";
		   InternalPrefix "${DIST}/${SECTION}/";
		   Contents "${DIST}/Contents-${ARCH}";
		   #Contents::Header "";
		   BinCacheDB "packages-${SECTION}-${ARCH}.db";
		   #FileList "list of files";
		   #SourceFileList "list of files";
		};

		Tree "dists/${codeName}" {
		    Sections "${sectionNames}";
		    Architectures "${architectureNames} source";
		    #LongDescription
		    #BinOverride
		    #SrcOverride
		    #ExtraOverride
		    #SrcExtraOverride
		}
	EOF
}

function generateArchive()
{
	apt-ftparchive -q=2 generate "$configurationFilePath"
	
	cd "$distsCodeNamePath" >/dev/null
	apt-ftparchive -q=2 -c "$configurationFilePath" release . >Release
	cd - >/dev/null
}

function signArchive()
{
	cd "$distsCodeNamePath" >/dev/null
	if [ -f Release.gpg ]; then
		rm Release.gpg
	fi
	gpgWrapped --output Release.gpg -ba Release
	cd - >/dev/null
}

function generateSourceListSnippets()
{
	local -r fileFilePath="$archiveDirPath"/hdn.secure.file.sources.list
	cat <<-EOF >"$fileFilePath"
		# To use this sources.list do:-
		# sudo ln -s $localFilePath /etc/apt/sources.list.d/00hdn.secure.file.sources.list
		deb file:///${archiveDirPath}/ ${codeName} ${sectionNames}
		deb-src file:///${archiveDirPath}/ ${codeName} ${sectionNames}
	EOF
	
	local -r httpFilePath="$archiveDirPath"/hdn.secure.http.sources.list
	cat <<-EOF >"$httpFilePath"
		# To use this sources.list do:-
		# sudo ln -s $httpFilePath /etc/apt/sources.list.d/00hdn.secure.http.sources.list
		deb http://$(hostname).cloudapp.net/archives/${repositoryName}/ ${codeName} ${sectionNames}
		deb-src http://$(hostname).cloudapp.net/archives/${repositoryName}/ ${codeName} ${sectionNames}
	EOF

	local -r httpsFilePath="$archiveDirPath"/hdn.secure.https.sources.list
	cat <<-EOF >"$httpsFilePath"
		# To use this sources.list do:-
		# sudo ln -s $httpsFilePath /etc/apt/sources.list.d/00hdn.secure.https.sources.list
		deb https://$(hostname).cloudapp.net/archives/${repositoryName}/ ${codeName} ${sectionNames}
		deb-src https://$(hostname).cloudapp.net/archives/${repositoryName}/ ${codeName} ${sectionNames}
	EOF
}

function exportPublicKey()
{
	gpgWrapped --list-keys
	gpgWrapped --export --armor >"$repositoryKey"
	# gpgWrapped --export B1850655 | sudo -p "Password to install signing key" apt-key add -
	
	# Done to prevent bash interpreting as variable substitution these variables
	local -r BASENAME='"$(basename "$0")"'
	local -r DIRNAME='"$(dirname "$0")"'
	local -r PWD='"$(pwd)"'
	local -r OURNAME='$ourName'
	local -r ERROR='$error'
	local -r NUMBER='$#'
	local -r NUMBER1='"$1"'
	local -r ALL='"$@"'
	
	cat <<-EOF >"$installFilePath"
		#!/bin/bash -
		
		# © Crown Copyright 2013
		#
		# Licensed under the Apache License, Version 2.0 (the "License");
		# you may not use this file except in compliance with the License.
		# You may obtain a copy of the License at
		#
		#     http://www.apache.org/licenses/LICENSE-2.0
		#
		# Unless required by applicable law or agreed to in writing, software
		# distributed under the License is distributed on an "AS IS" BASIS,
		# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		# See the License for the specific language governing permissions and
		# limitations under the License.
		
		set -e
		
		readonly ourName=${BASENAME}
		
		cd ${DIRNAME} 1>/dev/null
		readonly crudeOurPath=${PWD}
		cd - 1>/dev/null
		
		function exitHelp()
		{
			echo "Usage: ${OURNAME} [--help]" 1>&2
			exit $1
		}
		
		function exitError()
		{
			local -r error="$1"
			echo "${OURNAME}: ${ERROR}" 1>&2
			exitHelp 1
		}
		
		function parseCommandLine()
		{
			if [ ${NUMBER} -eq 0 ]; then
				:
			elif [ ${NUMBER} -eq 1 ]; then
				if [ "${NUMBER1}" = "--help" ]; then
					exitHelp 2
				elif  [ "${NUMBER1}" = "-h" ]; then
					exitHelp 2
				else
					exitError "Invalid options"
				fi
			else
				exitError "Invalid options"
			fi
		}
		
		function importKey()
		{
			cat <<-EOK | sudo -p "Password to import key for repository $repositoryName: " apt-key add -
				$(cat ${repositoryKey})
			EOK
		}
		
		function createSourcesListFragment()
		{
			cat <<-EOK | sudo -p "Password to install apt sources.list for repository $repositoryName: " tee /etc/apt/sources.list.d/00hdn.secure.http.sources.list
				deb http://$(hostname).cloudapp.net/archives/${repositoryName}/ ${codeName} ${sectionNames}
				deb-src http://$(hostname).cloudapp.net/archives/${repositoryName}/ ${codeName} ${sectionNames}
			EOK
		}
		
		function main()
		{
			parseCommandLine ${ALL}
			importKey
			createSourcesListFragment
		}
		
		main ${ALL}
	EOF
	
	chmod +x "$installFilePath"
}

function parseCommandLine()
{
	if [ $# -eq 1 ]; then
		if [ "$1" = "--help" ]; then
			exitHelp 2
		elif  [ "$1" = "-h" ]; then
			exitHelp 2
		else
			exitError "Invalid options"
		fi
	elif [ $# -eq 2 ]; then
		readonly packagesFolderName="$1"
		readonly repositoryName="$2"
		readonly codeName="precise"
		readonly sectionNames="main restricted universe multiverse"
		readonly architectureNames="amd64 armel armhf i386 powerpc"
		readonly keyring="hdn"
	else
		exitError "Invalid options"
	fi
}

function main()
{
	parseCommandLine "$@"
	setPaths
	makePaths
	installPackages
	createAptFtparchiveConfiguration
	generateArchive
	signArchive
	exportPublicKey
	generateSourceListSnippets
}

main "$@"
