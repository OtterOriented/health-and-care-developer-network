#ssl_certificate "/etc/hdn-services/certificate-and-bundle.pem";
#ssl_certificate_key "/etc/hdn-services/privatekey.pem";

# http://serverfault.com/questions/381545/how-to-extract-only-the-file-name-from-the-request-uri
# Gets the basename of the original request
map $request_uri $request_basename
{
	~/(?<captured_request_basename>[^/?]*)(?:\?|$) $captured_request_basename;
}

upstream gs1
{
	server 127.0.0.1:8080;
}

upstream jetty
{
	server 127.0.0.1:7000;
}

upstream fourstore
{
	server 127.0.0.1:9000;
}

server
{
	listen [::]:80 default_server backlog=1024 deferred so_keepalive=off;
	#listen [::]:443 default_server backlog=1024 deferred so_keepalive=off ssl;
	
	#server_name $hostname.cloudapp.net;
	server_name *.cloudapp.net;
	server_name_in_redirect on;
	
	rewrite_log on;
	
	# Files without extensions are html - means try_files has less work to do
	default_type text/html;
	
	more_set_headers "Server: HDN";
	more_set_headers -s 405 "Allow: GET, HEAD";
	
	set $host_bad Y;
	# Reject weirdness, eg GET proxypass.com and so on
	#if ($host = "$hostname.cloudapp.net")
	#{
	#	set $host_bad N;
	#}
	#if ($host_bad = "Y")
	#{
	#	return 403;
	#}
	
	set $root /srv/hdn-nginx/hdn-services/content;
	if ($http_x_pjax = true)
	{
		set $root /srv/hdn-nginx/hdn-services/pjax;
	}
	# Supports Amazon CloudFront and Cross-Domain pjax requests
	if ($arg__pjax = "%23pjax")
	{
		set $root /srv/hdn-nginx/hdn-services/pjax;
	}
	
	root $root;
	
	# Do not allow direct linking to static gz files
	location ~ \.(?:gz)$
	{
		internal;
	}
	
	# Drop invalid locations
	location ~ \.(?:aspx|php|jsp|asp|cgi|shtml|html|htm)$
	{
		return 410;
	}
	
	location /
	{
		# ?: is a 'non-capturing mark'
		if ($request_method !~ ^(?:GET|HEAD)$)
		{
			return 405;
		}
		
		try_files $uri $uri/ =404;
		# causes an internal rewrite for files ending '/', which then hits the INTERNAL ~ .*/index$ location, which DOES NOT re-write the root
		index index;
		
		# Lines below DO NOT APPLY if we serve /, /docs/, /legal/, etc
		
		add_header Strict-Transport-Security "max-age=3600";
		
		expires 60m;
		
		# Click Jacking protection (disallows use of IFRAME)
		add_header X-Frame-Options DENY;
	
		# IE XSS protection for HTML
		add_header X-XSS-Protection "1; mode=block";
		
		add_header X-DNS-Prefetch-Control on;
		
		add_header X-UA-Compatible "IE=edge,chrome=1";
		add_header X-RIM-Auto-Match "none";
		
		add_header Access-Control-Allow-Origin "*";
		
		# Do not allow direct linking to index files
		# Used for /, /docs/, /legal/, etc
		location ~ .*/index$
		{
			internal;
		
			add_header Strict-Transport-Security "max-age=3600";
		
			expires 60m;
		
			# Click Jacking protection (disallows use of IFRAME)
			add_header X-Frame-Options DENY;
	
			# IE XSS protection for HTML
			add_header X-XSS-Protection "1; mode=block";
		
			add_header X-DNS-Prefetch-Control on;
		
			add_header X-UA-Compatible "IE=edge,chrome=1";
			add_header X-RIM-Auto-Match "none";
		
			add_header Access-Control-Allow-Origin "*";
		}
	}
	
	location /gs1/
	{
		# ?: is a 'non-capturing mark'
		if ($request_method !~ ^(?:GET|HEAD)$)
		{
			return 405;
		}

		proxy_pass http://gs1/gs1/;
		proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
		proxy_redirect off;
		proxy_buffering off;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}
	
	location /elda/
	{
		# ?: is a 'non-capturing mark'
		if ($request_method !~ ^(?:GET|HEAD)$)
		{
			return 405;
		}

		proxy_pass http://jetty/elda/;
		proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
		proxy_redirect off;
		proxy_buffering off;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}
	
	location /sparql/
	{
		# ?: is a 'non-capturing mark'
		if ($request_method !~ ^(?:GET|HEAD)$)
		{
			return 405;
		}

		proxy_pass http://fourstore/sparql/;
		proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
		proxy_redirect off;
		proxy_buffering off;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}
	
	location /css/
	{
		# ?: is a 'non-capturing mark'
		if ($request_method !~ ^(?:GET|HEAD)$)
		{
			return 405;
		}
		
		add_header Strict-Transport-Security "max-age=8640000";
		
		# See https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag
		add_header X-Robots-Tag none;
		
		# expires max does not set cache-control to public
		add_header Expires "Thu, 31 Dec 2037 23:55:55 GMT";
		add_header Cache-Control "public, max-age=315360000";
	
		# Prevent IE trying to deduce MIME type rather than use Content-Type header for CSS and Javascript
		add_header X-Content-Type-Options nosniff;
	}
	
	location /downloads/
	{
		# ?: is a 'non-capturing mark'
		if ($request_method !~ ^(?:GET|HEAD)$)
		{
			return 405;
		}
		
		add_header Strict-Transport-Security "max-age=8640000";
		
		# See https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag
		add_header X-Robots-Tag none;
		
		# expires max does not set cache-control to public
		add_header Expires "Thu, 31 Dec 2037 23:55:55 GMT";
		add_header Cache-Control "public, max-age=315360000";
		
		add_header Content-Disposition "attachment; filename=$request_basename";
	}
	
	location /font/
	{
		# ?: is a 'non-capturing mark'
		if ($request_method !~ ^(?:GET|HEAD)$)
		{
			return 405;
		}
		
		add_header Strict-Transport-Security "max-age=8640000";
		
		# See https://developers.google.com/webmasters/control-crawl-index/docs/robots_meta_tag
		add_header X-Robots-Tag none;
		
		# expires max does not set cache-control to public
		add_header Expires "Thu, 31 Dec 2037 23:55:55 GMT";
		add_header Cache-Control "public, max-age=315360000";
		
		add_header Access-Control-Allow-Origin "*";
		
		add_header Content-Disposition "attachment; filename=$request_basename";
	}
	
	location /ico/
	{
		# ?: is a 'non-capturing mark'
		if ($request_method !~ ^(?:GET|HEAD)$)
		{
			return 405;
		}
		
		add_header Strict-Transport-Security "max-age=8640000";
		
		add_header X-Robots-Tag none;
		add_header Expires "Thu, 31 Dec 2037 23:55:55 GMT";
		add_header Cache-Control "public, max-age=315360000";
	}
	
	location /img/
	{
		# ?: is a 'non-capturing mark'
		if ($request_method !~ ^(?:GET|HEAD)$)
		{
			return 405;
		}
		
		add_header Strict-Transport-Security "max-age=8640000";
		
		add_header X-Robots-Tag none;
		add_header Expires "Thu, 31 Dec 2037 23:55:55 GMT";
		add_header Cache-Control "public, max-age=315360000";
	}
	
	location /js/
	{
		# ?: is a 'non-capturing mark'
		if ($request_method !~ ^(?:GET|HEAD)$)
		{
			return 405;
		}
		
		add_header Strict-Transport-Security "max-age=8640000";
		
		add_header X-Robots-Tag none;
		add_header Expires "Thu, 31 Dec 2037 23:55:55 GMT";
		add_header Cache-Control "public, max-age=315360000";
	
		# Prevent IE trying to deduce MIME type rather than use Content-Type header for CSS and Javascript
		add_header X-Content-Type-Options nosniff;
	}
	
	location /errors/
	{
		# Note: can't add headers for 400 or 500 errors
		
		root /srv/hdn-nginx/hdn-services;
		internal;
	}
}

server
{
	listen [::ffff:127.0.0.1]:80;
	listen [::1]:80;
	server_name localhost ip6-localhost ip6-loopback;
	
	# ?: is a 'non-capturing mark'
	if ($request_method !~ ^(?:GET|HEAD)$)
	{
		return 405;
	}
	
	add_header Strict-Transport-Security "max-age=8640000";
	add_header Expires "Thu, 31 Dec 2037 23:55:55 GMT";
	add_header Cache-Control "public, max-age=315360000";
	
	return 301 http://$hostname.cloudapp.net$request_uri;
}

#server
#{
#	listen [::ffff:127.0.0.1]:443 ssl;
#	listen [::1]:443 ssl;
#	server_name localhost ip6-localhost ip6-loopback;
#	
#	# ?: is a 'non-capturing mark'
#	if ($request_method !~ ^(?:GET|HEAD)$)
#	{
#		return 405;
#	}
#	
#	add_header Strict-Transport-Security "max-age=8640000";
#	add_header Expires "Thu, 31 Dec 2037 23:55:55 GMT";
#	add_header Cache-Control "public, max-age=315360000";
#	
#	return 301 https://$hostname.cloudapp.net$request_uri;
#}
