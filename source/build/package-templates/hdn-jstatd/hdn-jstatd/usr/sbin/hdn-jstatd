#!/bin/bash -

# Â© Crown Copyright 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

readonly ourName="$(basename "$0")"

cd "$(dirname "$0")" 1>/dev/null
readonly crudeOurPath="$(pwd)"
cd - 1>/dev/null

function exitHelp()
{
	cat 1>&2 <<-EOF
		Usage: $ourName -h
		Usage: $ourName --help
		Usage: $ourName
	EOF
	exit $1
}

function exitError()
{
	local -r error="$1"
	echo "$ourName: $error" 1>&2
	exitHelp 1
}

function syslogScriptStarted()
{
	logger -p "daemon.info" -t "hdn-jstatd" "$0 script started with arguments $@"
}

function parseCommandLine()
{
	if [ $# -eq 0 ]; then
		:
	elif [ $# -eq 1 ]; then
		if [ "$1" = "-h" ]; then
			exitHelp 2
		elif [ "$1" = "--help" ]; then
			exitHelp 2
		else
			exitError "Invalid options"
		fi
	else
		exitError "Invalid options"
	fi
}

function ensureRunningAsRoot()
{
	if [ $EUID -ne 0 ]; then
		exitError "Can only be run by a user with EUID 0"
	fi
}

function prepareEnvironmentVariables()
{
	unset JAVA_HOME
	export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
	
	unset CLASSPATH
	export CLASSPATH
	
	unset LANG
	unset LC_CTYPE
	unset LC_ALL
	unset LC_NUMERIC
	unset LC_TIME
	unset LC_COLLATE
	unset LC_MONETARY
	unset LC_MESSAGES
	unset LC_PAPER
	unset LC_NAME
	unset LC_ADDRESS
	unset LC_MEASUREMENT
	unset LC_MEASUREMENT
	unset LC_IDENTIFICATION
	
	# Java has bugs that incorrectly use these POSIX variables, hence the specification of more than LANG
	export LANG=en_GB.UTF-8
	export LC_CTYPE=en_GB.UTF-8
	export LC_ALL=en_GB.UTF-8
}

function ensureUmaskCorrectForLogging()
{
	umask u=rwx,g=rx,o=rx >/dev/null
}

function computeDatePointForLogs()
{
	local -r nanosecondDate="$(date --utc +'%Y-%m-%dT%H:%M:%S.%N')"
	# Does not round up
	readonly millisecondDate=${nanosecondDate:0:23}
}

function touchLogFilesToEnsureCorrectPermissions()
{
	readonly logFolderPath=/var/log/hdn-jstatd

	readonly stdoutLog="$logFolderPath"/hdn-jstatd.stdout.log
	touch "$stdoutLog"
	chown root:root "$stdoutLog"
	printf "${millisecondDate}\tvaluable\tmain\thdn-jstatd\tbash\tString\t\"hdn-jstatd logging started\"\n" >>"$stdoutLog"
	logger -p "daemon.info" -t "hdn-jstatd" "hdn-jstatd logging started"

	readonly stderrLog="$logFolderPath"/hdn-jstatd.stderr.log
	touch "$stderrLog"
	chown root:root "$stderrLog"
	printf "${millisecondDate}\tvaluable\tmain\thdn-jstatd\tbash\tString\t\"hdn-jstatd logging started\"\n" >>"$stderrLog"
}

function determinePolicyFile()
{
	readonly policyFileName="$(uname)".policy
	readonly policyFilePath="/etc/hdn-jstatd"/"$policyFileName"
	if [ ! -f "$policyFilePath" ]; then
		exitError "No policy file at $policyFilePath for this uname (OS)"
	fi
}

function executeJstatd()
{
	exec -a "$ourName" "$JAVA_HOME"/bin/jstatd \
	-J-Djava.security.policy="$policyFilePath" \
	-J-Dfile.encoding=UTF-8 \
	-J-Dsun.jnu.encoding=UTF-8 \
	-J-Djava.rmi.server.randomIDs=true \
	-J-Djava.net.preferIPv4Stack=true \
	-J-Dnetworkaddress.cache.ttl=0 \
	-J-Dnetworkaddress.cache.negative.ttl=0 \
	-p 1099 \
	"$@" 1>>"$stdoutLog" 2>>"$stderrLog"
}

function main()
{
	syslogScriptStarted "$@"
	parseCommandLine "$@"
	ensureRunningAsRoot
	prepareEnvironmentVariables
	ensureUmaskCorrectForLogging
	computeDatePointForLogs
	touchLogFilesToEnsureCorrectPermissions
	determinePolicyFile
	executeJstatd "$@"
}

main "$@"
